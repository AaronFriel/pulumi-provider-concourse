// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package concourse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get step
type Get struct {
	Identifier string `pulumi:"identifier"`
}

// Server Information
type Info struct {
	Cluster_name   *string `pulumi:"cluster_name"`
	External_url   *string `pulumi:"external_url"`
	Version        string  `pulumi:"version"`
	Worker_version string  `pulumi:"worker_version"`
}

// Job configuration
type Job struct {
	Identifier string        `pulumi:"identifier"`
	Plan       []interface{} `pulumi:"plan"`
}

// JobInput is an input type that accepts JobArgs and JobOutput values.
// You can construct a concrete instance of `JobInput` via:
//
//	JobArgs{...}
type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(context.Context) JobOutput
}

// Job configuration
type JobArgs struct {
	Identifier pulumi.StringInput `pulumi:"identifier"`
	Plan       pulumi.ArrayInput  `pulumi:"plan"`
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (i JobArgs) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i JobArgs) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// Job configuration
type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

func (o JobOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v Job) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o JobOutput) Plan() pulumi.ArrayOutput {
	return o.ApplyT(func(v Job) []interface{} { return v.Plan }).(pulumi.ArrayOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Job {
		return vs[0].([]Job)[vs[1].(int)]
	}).(JobOutput)
}

// Pipeline configuration
type PipelineConfig struct {
	Jobs []Job `pulumi:"jobs"`
}

// PipelineConfigInput is an input type that accepts PipelineConfigArgs and PipelineConfigOutput values.
// You can construct a concrete instance of `PipelineConfigInput` via:
//
//	PipelineConfigArgs{...}
type PipelineConfigInput interface {
	pulumi.Input

	ToPipelineConfigOutput() PipelineConfigOutput
	ToPipelineConfigOutputWithContext(context.Context) PipelineConfigOutput
}

// Pipeline configuration
type PipelineConfigArgs struct {
	Jobs JobArrayInput `pulumi:"jobs"`
}

func (PipelineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConfig)(nil)).Elem()
}

func (i PipelineConfigArgs) ToPipelineConfigOutput() PipelineConfigOutput {
	return i.ToPipelineConfigOutputWithContext(context.Background())
}

func (i PipelineConfigArgs) ToPipelineConfigOutputWithContext(ctx context.Context) PipelineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineConfigOutput)
}

func (i PipelineConfigArgs) ToPipelineConfigPtrOutput() PipelineConfigPtrOutput {
	return i.ToPipelineConfigPtrOutputWithContext(context.Background())
}

func (i PipelineConfigArgs) ToPipelineConfigPtrOutputWithContext(ctx context.Context) PipelineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineConfigOutput).ToPipelineConfigPtrOutputWithContext(ctx)
}

// PipelineConfigPtrInput is an input type that accepts PipelineConfigArgs, PipelineConfigPtr and PipelineConfigPtrOutput values.
// You can construct a concrete instance of `PipelineConfigPtrInput` via:
//
//	        PipelineConfigArgs{...}
//
//	or:
//
//	        nil
type PipelineConfigPtrInput interface {
	pulumi.Input

	ToPipelineConfigPtrOutput() PipelineConfigPtrOutput
	ToPipelineConfigPtrOutputWithContext(context.Context) PipelineConfigPtrOutput
}

type pipelineConfigPtrType PipelineConfigArgs

func PipelineConfigPtr(v *PipelineConfigArgs) PipelineConfigPtrInput {
	return (*pipelineConfigPtrType)(v)
}

func (*pipelineConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineConfig)(nil)).Elem()
}

func (i *pipelineConfigPtrType) ToPipelineConfigPtrOutput() PipelineConfigPtrOutput {
	return i.ToPipelineConfigPtrOutputWithContext(context.Background())
}

func (i *pipelineConfigPtrType) ToPipelineConfigPtrOutputWithContext(ctx context.Context) PipelineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineConfigPtrOutput)
}

// Pipeline configuration
type PipelineConfigOutput struct{ *pulumi.OutputState }

func (PipelineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConfig)(nil)).Elem()
}

func (o PipelineConfigOutput) ToPipelineConfigOutput() PipelineConfigOutput {
	return o
}

func (o PipelineConfigOutput) ToPipelineConfigOutputWithContext(ctx context.Context) PipelineConfigOutput {
	return o
}

func (o PipelineConfigOutput) ToPipelineConfigPtrOutput() PipelineConfigPtrOutput {
	return o.ToPipelineConfigPtrOutputWithContext(context.Background())
}

func (o PipelineConfigOutput) ToPipelineConfigPtrOutputWithContext(ctx context.Context) PipelineConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineConfig) *PipelineConfig {
		return &v
	}).(PipelineConfigPtrOutput)
}

func (o PipelineConfigOutput) Jobs() JobArrayOutput {
	return o.ApplyT(func(v PipelineConfig) []Job { return v.Jobs }).(JobArrayOutput)
}

type PipelineConfigPtrOutput struct{ *pulumi.OutputState }

func (PipelineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineConfig)(nil)).Elem()
}

func (o PipelineConfigPtrOutput) ToPipelineConfigPtrOutput() PipelineConfigPtrOutput {
	return o
}

func (o PipelineConfigPtrOutput) ToPipelineConfigPtrOutputWithContext(ctx context.Context) PipelineConfigPtrOutput {
	return o
}

func (o PipelineConfigPtrOutput) Elem() PipelineConfigOutput {
	return o.ApplyT(func(v *PipelineConfig) PipelineConfig {
		if v != nil {
			return *v
		}
		var ret PipelineConfig
		return ret
	}).(PipelineConfigOutput)
}

func (o PipelineConfigPtrOutput) Jobs() JobArrayOutput {
	return o.ApplyT(func(v *PipelineConfig) []Job {
		if v == nil {
			return nil
		}
		return v.Jobs
	}).(JobArrayOutput)
}

// Put step
type Put struct {
	Identifier string `pulumi:"identifier"`
}

// Task step
type Task struct {
	Identifier string `pulumi:"identifier"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), JobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineConfigInput)(nil)).Elem(), PipelineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineConfigPtrInput)(nil)).Elem(), PipelineConfigArgs{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(PipelineConfigOutput{})
	pulumi.RegisterOutputType(PipelineConfigPtrOutput{})
}
